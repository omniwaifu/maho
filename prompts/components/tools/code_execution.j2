---
version: "1.0"
category: "tool"
description: "Code execution tool documentation and examples"
required_vars: []
optional_vars: ["timeout", "max_retries", "available_runtimes"]
---
### code_execution_tool

**Purpose**: Execute terminal commands, Python, or Node.js code for computational and software tasks

**Critical Parameters**:
- `code`: Properly escaped source code or command (required)  
- `runtime`: Execution environment - "terminal"|"python"|"nodejs"|"output"|"reset" (required)
- `session`: Session ID for parallel execution (default: 0)

**Execution Constraints**:
{%- set exec_timeout = timeout | default(30) %}
- Timeout: {{ exec_timeout }} seconds automatic return
- Long processes: Use "output" runtime to check progress
- Hanging processes: Use "reset" runtime to terminate and clean session
- Package installation: Use "terminal" runtime with pip/npm/apt-get

**Quality Assurance**:
{%- set retries = max_retries | default(3) %}
- Error recovery: Adjust code and retry (max {{ retries }} attempts)
- Data validation: Replace placeholders with actual values before execution
- Dependency checking: Verify requirements exist before execution
- Output parsing: Monitor for [SYSTEM: ...] framework messages

**Efficiency Guidelines**:
- Use print()/console.log() for explicit output
- Plan code structure to minimize execution time
- Leverage session isolation for parallel operations
- Validate inputs before expensive computations

{%- set runtimes = available_runtimes | default([
    {"name": "terminal", "desc": "shell commands, package installation"},
    {"name": "python", "desc": "python code execution"},
    {"name": "nodejs", "desc": "javascript code execution"},
    {"name": "output", "desc": "check running process output"},
    {"name": "reset", "desc": "kill process and reset session"}
]) %}

runtime selection:
{%- for runtime in runtimes %}
- "{{ runtime.name }}": {{ runtime.desc }}
{%- endfor %}

**Strategic Usage Examples**:

**Pattern 1: Computational Task**
~~~json
{
    "thoughts": [
        "Current situation: Need mathematical calculation for data analysis",
        "Strategy: Use Python for numerical computation with validation",
        "Execution: Import required libraries and process data",
        "Expected: Accurate results with error handling",
        "Fallback: Simplify calculation if imports fail"
    ],
    "tool_name": "code_execution_tool",
    "tool_args": {
        "runtime": "python",
        "session": 0,
        "code": "import math\nresult = math.sqrt(144)\nprint(f'Result: {result}')\nprint('Calculation successful')"
    }
}
~~~

**Pattern 2: System Preparation**
~~~json
{
    "thoughts": [
        "Current situation: Missing required package for task",
        "Strategy: Install dependency before proceeding with main task", 
        "Execution: Use package manager with confirmation",
        "Expected: Successful installation with no errors",
        "Fallback: Use alternative package if primary fails"
    ],
    "tool_name": "code_execution_tool",
    "tool_args": {
        "runtime": "terminal",
        "session": 0,
        "code": "apt-get update && apt-get install -y zip && echo 'Installation complete'"
    }
}
~~~

**Pattern 3: Progress Monitoring**
~~~json
{
    "thoughts": [
        "Current situation: Long-running process needs status check",
        "Strategy: Monitor output without interrupting execution",
        "Execution: Check session output buffer",
        "Expected: Process status and any new output",
        "Fallback: Reset if process appears hung"
    ],
    "tool_name": "code_execution_tool",
    "tool_args": {
        "runtime": "output",
        "session": 0
    }
}
~~~

**Pattern 4: Recovery Operation**
~~~json
{
    "thoughts": [
        "Current situation: Process unresponsive beyond timeout",
        "Strategy: Clean reset to restore functionality",
        "Execution: Terminate all processes and clear session",
        "Expected: Fresh session ready for new operations",
        "Fallback: Use different session if reset fails"
    ],
    "tool_name": "code_execution_tool",
    "tool_args": {
        "runtime": "reset",
        "session": 0
    }
}
~~~ 